#!/bin/bash

# Usage Example
# ./himpala 'show tables;' database

hUser=$(whoami)
function readlinkf() {
    if [ "$(uname -s)" == "Darwin" ]; then
        perl -MCwd -e 'print Cwd::abs_path shift' "$1"
    else
        readlink -f "$1"
    fi
}

hDB=${HADOOP_DB:-"default"}
hHost=${HADOOP_HOST:-"cdp-client-01.biotech.cdc.gov"}
hCoord=${IMPALA_COORDINATOR:-"cdp-05.biotech.cdc.gov"}

hCert=/etc/tls/rootca.cer
hLogin=$hUser@$hHost
query='show tables'

function help() {
    echo -e "Usage:\n\t$0 <query> [database] [--print-header|-p]"
    exit 0
}

print_header=0
args=()
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --print-header | -p)
            print_header=1
            shift
            ;;
        --* | -*)
            help
            ;;
        *)
            args+=("$1")
            shift
            ;;
    esac
done

nargs=${#args[@]}
if [ "$nargs" -eq "1" ]; then
    query=${args[0]}
elif [ "$nargs" -eq "2" ]; then
    query=${args[0]}
    hDB=${args[1]}
else
    help
fi

# Handle remote vs local execution
SSH="ssh $hLogin"
EXEC=$SSH
JUMP=31
if [ "$(hostname -s | cut -f1 -d'-')" == "cdp" ]; then
    EXEC="eval"
    SSH=""
    JUMP=1
fi

CMD="impala-shell -i $hCoord -d $hDB -k --ssl --ca_cert=$hCert --quiet --disable_live_progress -B"
if [ -s "$query" ]; then
    # Query is in a local file, see if it is on the remote host
    filename=$(readlinkf "$query")
    if $SSH stat "$filename" > /dev/null 2>&1; then
        CMD+=" -f '$filename'"
    else
        query=$( tr \' \" < "$query")
        CMD+=" -q '$query'"
    fi
else
    # Query is not a local file but could be a remote file
    if $SSH stat "$query" > /dev/null 2>&1; then
        filename=$query
        CMD+=" -f '$filename'"
    else
        query=$(tr \' \" <<< "$query")
        CMD+=" -q '$query'"
    fi
fi
if [ "$print_header" -eq "1" ]; then
    CMD+=" --print_header"
fi

exec 3>&1
OUTPUT=$($EXEC "$CMD" 2>&1 1>&3)
STATUS=$?
exec 3>&-

if [ "$STATUS" -ne "0" ]; then
    echo "ERROR ($STATUS): $0" 1>&2
    echo "TRIED CMD: $SSH $CMD" 1>&2
    echo "-----------START-LOG---------------" 1>&2
    echo "$OUTPUT" | tail -n +$JUMP 1>&2
    echo "-----------END-LOG-----------------" 1>&2
    exit $STATUS
fi
